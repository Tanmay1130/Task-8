
-- Task 8


-- Use your working database
USE mini_library;

-- Stored Procedure: BorrowBook
DELIMITER $$

CREATE PROCEDURE BorrowBook (
    IN p_member_id INT,
    IN p_book_id INT,
    IN p_borrow_date DATE,
    IN p_due_date DATE
)
BEGIN
    DECLARE available INT;

    SELECT copies_available INTO available
    FROM Books
    WHERE book_id = p_book_id;

    IF available > 0 THEN
        INSERT INTO Borrow (member_id, book_id, borrow_date, due_date)
        VALUES (p_member_id, p_book_id, p_borrow_date, p_due_date);

        UPDATE Books
        SET copies_available = copies_available - 1
        WHERE book_id = p_book_id;
    ELSE
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'No copies available for borrowing.';
    END IF;
END $$

DELIMITER ;

-- Function: CalculateFine
DELIMITER $$

CREATE FUNCTION CalculateFine (
    due_date DATE,
    return_date DATE
) RETURNS DECIMAL(6,2)
DETERMINISTIC
BEGIN
    DECLARE days_late INT;
    DECLARE fine_amount DECIMAL(6,2);

    SET days_late = DATEDIFF(return_date, due_date);

    IF days_late > 0 THEN
        SET fine_amount = days_late * 2.00;
    ELSE
        SET fine_amount = 0.00;
    END IF;

    RETURN fine_amount;
END $$

DELIMITER ;

-- Additional Procedure: ListOverdueBooks
DELIMITER $$

CREATE PROCEDURE ListOverdueBooks()
BEGIN
    SELECT 
        b.borrow_id,
        m.name AS member_name,
        bk.title AS book_title,
        b.due_date
    FROM Borrow b
    JOIN Members m ON b.member_id = m.member_id
    JOIN Books bk ON b.book_id = bk.book_id
    LEFT JOIN Returns r ON b.borrow_id = r.borrow_id
    WHERE b.due_date < CURDATE() AND r.borrow_id IS NULL;
END $$


